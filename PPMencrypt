section .data
    input_file      db 'input.txt', 0
    output_file     db 'output.ppm', 0
    output_text     db 'output.txt', 0
    key             db 0x42  ; Encryption key
    width           equ 100   ; Width of the image
    height          equ 100   ; Height of the image

section .bss
    file_handle_in  resd 1
    file_handle_out resd 1
    character       resb 1
    pixels          resb width*height*3  ; 3 bytes per pixel (RGB)

section .text
    global _start

_start:
    ; Encrypt
    call encrypt_and_create_ppm

    ; Decrypt
    call read_ppm_and_decrypt

    ; Exit program
    mov eax, 1          ; sys_exit system call
    xor ebx, ebx        ; Return 0 status
    int 0x80            ; Call kernel

encrypt_and_create_ppm:
    ; Procedure to encrypt file and create ppm
    ; Input: None
    ; Output: None
    ; Modifies: character, file_handle_in, file_handle_out, pixels

    ; Open text file for reading
    mov eax, 5          ; sys_open system call
    mov ebx, input_file
    mov ecx, 0          ; O_RDONLY flag
    int 0x80            ; Call kernel
    mov dword [file_handle_in], eax  ; Store file handle

    ; Open output file for writing
    mov eax, 5          ; sys_open system call
    mov ebx, output_file
    mov ecx, 0102h      ; O_CREAT | O_WRONLY | O_TRUNC
    mov edx, 0644h      ; Mode: rw-r--r--
    int 0x80            ; Call kernel
    mov dword [file_handle_out], eax  ; Store file handle

    ; Initialize ppm header
    mov edx, 0          ; Initialize byte count for ppm
    mov word [pixels], 'P' + ('6' << 8)  ; P6 magic number
    add edx, 2

    mov word [pixels + 2], width
    add edx, 2
    mov word [pixels + 4], height
    add edx, 2
    mov byte [pixels + 6], 255
    inc edx

read_loop_encrypt:
    ; Read character from file
    mov eax, 3          ; sys_read system call
    mov ebx, dword [file_handle_in]
    mov ecx, character
    mov edx, 1          ; Read one byte
    int 0x80            ; Call kernel

    test eax, eax       ; Check for end of file
    jz  done_encrypt    ; If end of file, exit loop

    ; Encrypt character
    xor byte [character], key

    ; Store encrypted character in pixels
    mov [pixels + edx], character
    inc edx

    jmp read_loop_encrypt   ; Continue reading characters

done_encrypt:
    ; Write ppm to output file
    mov eax, 4          ; sys_write system call
    mov ebx, dword [file_handle_out]
    mov ecx, pixels
    mov edx, edx        ; edx contains the total byte count
    int 0x80            ; Call kernel

    ; Close files
    mov eax, 6          ; sys_close system call
    mov ebx, dword [file_handle_in]
    int 0x80            ; Call kernel

    mov ebx, dword [file_handle_out]
    int 0x80            ; Call kernel

    ret                 ; Return from procedure

read_ppm_and_decrypt:
    ; Procedure to read ppm and decrypt file
    ; Input: None
    ; Output: None
    ; Modifies: character, file_handle_in, file_handle_out, pixels

    ; Open ppm file for reading
    mov eax, 5          ; sys_open system call
    mov ebx, output_file
    mov ecx, 0          ; O_RDONLY flag
    int 0x80            ; Call kernel
    mov dword [file_handle_in], eax  ; Store file handle

    ; Open output text file for writing
    mov eax, 5          ; sys_open system call
    mov ebx, output_text
    mov ecx, 0102h      ; O_CREAT | O_WRONLY | O_TRUNC
    mov edx, 0644h      ; Mode: rw-r--r--
    int 0x80            ; Call kernel
    mov dword [file_handle_out], eax  ; Store file handle

    ; Read ppm header
    mov edx, 0          ; Initialize byte count for ppm header
    lea ebx, [pixels]   ; Point ebx to the beginning of the buffer
    read_header_loop:
        mov eax, 3      ; sys_read system call
        mov ebx, dword [file_handle_in]
        add ebx, edx    ; Add the current byte count to the file handle
        add ecx, edx    ; Add the current byte count to the buffer
        mov edx, 1      ; Read one byte
        int 0x80        ; Call kernel

        inc edx         ; Increment byte count
        cmp byte [ecx], 10 ; Check for newline character
        jne read_header_loop ; Continue until newline is encountered

    ; Read remaining ppm data
    mov edx, 0          ; Reset byte count for ppm data
    read_data_loop:
        mov eax, 3      ; sys_read system call
        mov ebx, dword [file_handle_in]
        add ebx, edx    ; Add the current byte count to the file handle
        lea ecx, [pixels + 14 + edx] ; Point ecx to the beginning of the buffer
        mov edx, 1      ; Read one byte
        int 0x80        ; Call kernel

        test eax, eax   ; Check for end of file
        jz  done_decrypt; If end of file, exit loop

        ; Decrypt character
        mov al, [pixels + 14 + edx - 1]
        xor al, key
        mov [pixels + 14 + edx - 1], al

        inc edx         ; Increment byte count
        jmp read_data_loop ; Continue reading data

    done_decrypt:
    ; Write decrypted text to output text file
    mov eax, 4          ; sys_write system call
    mov ebx, dword [file_handle_out]
    lea ecx, [pixels + 14] ; Point ecx to the beginning of the buffer
    mov edx, edx        ; edx contains the total byte count
    int 0x80            ; Call kernel

    ; Close files
    mov eax, 6          ; sys_close system call
    mov ebx, dword [file_handle_in]
    int 0x80            ; Call kernel

    mov ebx, dword [file_handle_out]
    int 0x80            ; Call
